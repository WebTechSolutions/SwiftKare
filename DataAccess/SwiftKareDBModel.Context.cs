//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SwiftKareDBEntities : DbContext
    {
        public SwiftKareDBEntities()
            : base("name=SwiftKareDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AdminUser> AdminUsers { get; set; }
        public virtual DbSet<Alert> Alerts { get; set; }
        public virtual DbSet<Allergy> Allergies { get; set; }
        public virtual DbSet<AppAttachment> AppAttachments { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Condition> Conditions { get; set; }
        public virtual DbSet<Consultation> Consultations { get; set; }
        public virtual DbSet<ConsultationRO> ConsultationROS { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DoctorLanguage> DoctorLanguages { get; set; }
        public virtual DbSet<DoctorLicenseState> DoctorLicenseStates { get; set; }
        public virtual DbSet<DoctorSpeciality> DoctorSpecialities { get; set; }
        public virtual DbSet<DoctorTiming> DoctorTimings { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<FamilyHX> FamilyHXes { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LifeStyle> LifeStyles { get; set; }
        public virtual DbSet<Medication> Medications { get; set; }
        public virtual DbSet<Medicine> Medicines { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientAllergy> PatientAllergies { get; set; }
        public virtual DbSet<PatientSystem> PatientSystems { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<RoleModule> RoleModules { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Speciallity> Speciallities { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SystemItemss> SystemItemsses { get; set; }
        public virtual DbSet<UserFile> UserFiles { get; set; }
        public virtual DbSet<Zip> Zips { get; set; }
        public virtual DbSet<Surgery> Surgeries { get; set; }
    
        public virtual int SP_AddAdmin(string lastName, string firstName, string email, string userId, string cB)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddAdmin", lastNameParameter, firstNameParameter, emailParameter, userIdParameter, cBParameter);
        }
    
        public virtual int SP_AddAlerts(string alertText, string alertFor, string cB)
        {
            var alertTextParameter = alertText != null ?
                new ObjectParameter("alertText", alertText) :
                new ObjectParameter("alertText", typeof(string));
    
            var alertForParameter = alertFor != null ?
                new ObjectParameter("alertFor", alertFor) :
                new ObjectParameter("alertFor", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddAlerts", alertTextParameter, alertForParameter, cBParameter);
        }
    
        public virtual int SP_AddAllergy(string allergyName, string cB)
        {
            var allergyNameParameter = allergyName != null ?
                new ObjectParameter("allergyName", allergyName) :
                new ObjectParameter("allergyName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddAllergy", allergyNameParameter, cBParameter);
        }
    
        public virtual int SP_AddAppointment(Nullable<long> doctorID, Nullable<long> patientID, Nullable<System.DateTime> appDate, Nullable<System.TimeSpan> appTime, string cb)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("doctorID", doctorID) :
                new ObjectParameter("doctorID", typeof(long));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(long));
    
            var appDateParameter = appDate.HasValue ?
                new ObjectParameter("appDate", appDate) :
                new ObjectParameter("appDate", typeof(System.DateTime));
    
            var appTimeParameter = appTime.HasValue ?
                new ObjectParameter("appTime", appTime) :
                new ObjectParameter("appTime", typeof(System.TimeSpan));
    
            var cbParameter = cb != null ?
                new ObjectParameter("cb", cb) :
                new ObjectParameter("cb", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddAppointment", doctorIDParameter, patientIDParameter, appDateParameter, appTimeParameter, cbParameter);
        }
    
        public virtual int SP_AddCity(string cityName, string cB)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddCity", cityNameParameter, cBParameter);
        }
    
        public virtual int SP_AddDoctor(string firstName, string lastName, string email, string userId, string cB)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddDoctor", firstNameParameter, lastNameParameter, emailParameter, userIdParameter, cBParameter);
        }
    
        public virtual int SP_AddDocumentType(string typeName, string cB)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("typeName", typeName) :
                new ObjectParameter("typeName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddDocumentType", typeNameParameter, cBParameter);
        }
    
        public virtual int SP_AddLanguage(string languageName, string cB)
        {
            var languageNameParameter = languageName != null ?
                new ObjectParameter("languageName", languageName) :
                new ObjectParameter("languageName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddLanguage", languageNameParameter, cBParameter);
        }
    
        public virtual int SP_AddMedicine(string medicineName, string cB)
        {
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddMedicine", medicineNameParameter, cBParameter);
        }
    
        public virtual int SP_AddNewss(string newstitle, string newsdetail, byte[] newsthumbnail, byte[] newsImage, string cB)
        {
            var newstitleParameter = newstitle != null ?
                new ObjectParameter("newstitle", newstitle) :
                new ObjectParameter("newstitle", typeof(string));
    
            var newsdetailParameter = newsdetail != null ?
                new ObjectParameter("newsdetail", newsdetail) :
                new ObjectParameter("newsdetail", typeof(string));
    
            var newsthumbnailParameter = newsthumbnail != null ?
                new ObjectParameter("newsthumbnail", newsthumbnail) :
                new ObjectParameter("newsthumbnail", typeof(byte[]));
    
            var newsImageParameter = newsImage != null ?
                new ObjectParameter("newsImage", newsImage) :
                new ObjectParameter("newsImage", typeof(byte[]));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddNewss", newstitleParameter, newsdetailParameter, newsthumbnailParameter, newsImageParameter, cBParameter);
        }
    
        public virtual int SP_AddPatient(string firstName, string lastName, string email, string userId, string cB)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddPatient", firstNameParameter, lastNameParameter, emailParameter, userIdParameter, cBParameter);
        }
    
        public virtual int SP_AddRoles(string roleName, string cB)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddRoles", roleNameParameter, cBParameter);
        }
    
        public virtual int SP_AddSpeciality(string specialityName, string cB)
        {
            var specialityNameParameter = specialityName != null ?
                new ObjectParameter("specialityName", specialityName) :
                new ObjectParameter("specialityName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddSpeciality", specialityNameParameter, cBParameter);
        }
    
        public virtual int SP_AddStates(string stateName, string cB)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("stateName", stateName) :
                new ObjectParameter("stateName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddStates", stateNameParameter, cBParameter);
        }
    
        public virtual int SP_AddSystemItem(string sysitemName, Nullable<long> sysid, string cB)
        {
            var sysitemNameParameter = sysitemName != null ?
                new ObjectParameter("sysitemName", sysitemName) :
                new ObjectParameter("sysitemName", typeof(string));
    
            var sysidParameter = sysid.HasValue ?
                new ObjectParameter("sysid", sysid) :
                new ObjectParameter("sysid", typeof(long));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddSystemItem", sysitemNameParameter, sysidParameter, cBParameter);
        }
    
        public virtual int SP_AddSystems(string systemName, string cB)
        {
            var systemNameParameter = systemName != null ?
                new ObjectParameter("systemName", systemName) :
                new ObjectParameter("systemName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddSystems", systemNameParameter, cBParameter);
        }
    
        public virtual int SP_AddUSerFiles(string documentType, Nullable<long> patientID, Nullable<long> doctorID, string cb, string fileName, byte[] fileContent, string fileurl)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("documentType", documentType) :
                new ObjectParameter("documentType", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(long));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("doctorID", doctorID) :
                new ObjectParameter("doctorID", typeof(long));
    
            var cbParameter = cb != null ?
                new ObjectParameter("cb", cb) :
                new ObjectParameter("cb", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileContentParameter = fileContent != null ?
                new ObjectParameter("fileContent", fileContent) :
                new ObjectParameter("fileContent", typeof(byte[]));
    
            var fileurlParameter = fileurl != null ?
                new ObjectParameter("fileurl", fileurl) :
                new ObjectParameter("fileurl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddUSerFiles", documentTypeParameter, patientIDParameter, doctorIDParameter, cbParameter, fileNameParameter, fileContentParameter, fileurlParameter);
        }
    
        public virtual int SP_AddZipCode(string zipName, string cB)
        {
            var zipNameParameter = zipName != null ?
                new ObjectParameter("zipName", zipName) :
                new ObjectParameter("zipName", typeof(string));
    
            var cBParameter = cB != null ?
                new ObjectParameter("CB", cB) :
                new ObjectParameter("CB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddZipCode", zipNameParameter, cBParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_AppointmentReport_Result> SP_AppointmentReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, string criteria)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var criteriaParameter = criteria != null ?
                new ObjectParameter("criteria", criteria) :
                new ObjectParameter("criteria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AppointmentReport_Result>("SP_AppointmentReport", datefromParameter, datetoParameter, criteriaParameter);
        }
    
        public virtual int sp_ApproveConsultation(Nullable<long> iD, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ApproveConsultation", iDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_ApproveDoctor(Nullable<long> iD, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ApproveDoctor", iDParameter, mBParameter, mDParameter);
        }
    
        public virtual ObjectResult<SP_CheckForDuplicatePatient_Result> SP_CheckForDuplicatePatient(string firstname, string lastname)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CheckForDuplicatePatient_Result>("SP_CheckForDuplicatePatient", firstnameParameter, lastnameParameter);
        }
    
        public virtual ObjectResult<SP_ConsultationReport_Result> SP_ConsultationReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ConsultationReport_Result>("SP_ConsultationReport", datefromParameter, datetoParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DeleteAdmin(Nullable<long> adminID, string mB, Nullable<System.DateTime> mD)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAdmin", adminIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteAlerts(Nullable<long> alertID, string mB, Nullable<System.DateTime> mD)
        {
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("alertID", alertID) :
                new ObjectParameter("alertID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAlerts", alertIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteAllergy(Nullable<long> allergyID, string mB, Nullable<System.DateTime> mD)
        {
            var allergyIDParameter = allergyID.HasValue ?
                new ObjectParameter("allergyID", allergyID) :
                new ObjectParameter("allergyID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAllergy", allergyIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteCity(Nullable<long> cityID, string mB, Nullable<System.DateTime> mD)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCity", cityIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteDoctor(Nullable<long> iD, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDoctor", iDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteDocumentType(Nullable<long> docTypeID, string mB, Nullable<System.DateTime> mD)
        {
            var docTypeIDParameter = docTypeID.HasValue ?
                new ObjectParameter("docTypeID", docTypeID) :
                new ObjectParameter("docTypeID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDocumentType", docTypeIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteLanguage(Nullable<long> languageID, string mB, Nullable<System.DateTime> mD)
        {
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("languageID", languageID) :
                new ObjectParameter("languageID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteLanguage", languageIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteMedicine(Nullable<long> medicineID, string mB, Nullable<System.DateTime> mD)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("medicineID", medicineID) :
                new ObjectParameter("medicineID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteMedicine", medicineIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteNews(Nullable<long> newsID, string mB, Nullable<System.DateTime> mD)
        {
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("newsID", newsID) :
                new ObjectParameter("newsID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteNews", newsIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeletePatient(Nullable<long> iD, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeletePatient", iDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteRole(Nullable<long> roleID, string mB, Nullable<System.DateTime> mD)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteRole", roleIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteSpeciality(Nullable<long> speciallityID, string mB, Nullable<System.DateTime> mD)
        {
            var speciallityIDParameter = speciallityID.HasValue ?
                new ObjectParameter("speciallityID", speciallityID) :
                new ObjectParameter("speciallityID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteSpeciality", speciallityIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteStates(Nullable<long> stateID, string mB, Nullable<System.DateTime> mD)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteStates", stateIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteSystemItem(Nullable<long> sysitemID, string mB, Nullable<System.DateTime> mD)
        {
            var sysitemIDParameter = sysitemID.HasValue ?
                new ObjectParameter("sysitemID", sysitemID) :
                new ObjectParameter("sysitemID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteSystemItem", sysitemIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteSystems(Nullable<long> systemID, string mB, Nullable<System.DateTime> mD)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteSystems", systemIDParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_DeleteZipCode(Nullable<long> zipID, string mB, Nullable<System.DateTime> mD)
        {
            var zipIDParameter = zipID.HasValue ?
                new ObjectParameter("zipID", zipID) :
                new ObjectParameter("zipID", typeof(long));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteZipCode", zipIDParameter, mBParameter, mDParameter);
        }
    
        public virtual ObjectResult<SP_DoctorReport_Result> SP_DoctorReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DoctorReport_Result>("SP_DoctorReport", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_PatientReport_Result> SP_PatientReport(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PatientReport_Result>("SP_PatientReport", datefromParameter, datetoParameter);
        }
    
        public virtual int sp_ResetDoctorPassword(Nullable<long> iD, string password, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetDoctorPassword", iDParameter, passwordParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_ResetPatientPassword(Nullable<long> iD, string password, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetPatientPassword", iDParameter, passwordParameter, mBParameter, mDParameter);
        }
    
        public virtual ObjectResult<SP_SelectAdmin_Result> SP_SelectAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAdmin_Result>("SP_SelectAdmin");
        }
    
        public virtual ObjectResult<SP_SelectAlerts_Result> SP_SelectAlerts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAlerts_Result>("SP_SelectAlerts");
        }
    
        public virtual ObjectResult<SP_SelectAllergy_Result> SP_SelectAllergy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAllergy_Result>("SP_SelectAllergy");
        }
    
        public virtual ObjectResult<SP_SelectCity_Result> SP_SelectCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectCity_Result>("SP_SelectCity");
        }
    
        public virtual ObjectResult<SP_SelectConsultation_Result> SP_SelectConsultation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectConsultation_Result>("SP_SelectConsultation");
        }
    
        public virtual ObjectResult<Doctor> SP_SelectDoctor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Doctor>("SP_SelectDoctor");
        }
    
        public virtual ObjectResult<Doctor> SP_SelectDoctor(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Doctor>("SP_SelectDoctor", mergeOption);
        }
    
        public virtual ObjectResult<SP_SelectDoctorsForApproval_Result> SP_SelectDoctorsForApproval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectDoctorsForApproval_Result>("SP_SelectDoctorsForApproval");
        }
    
        public virtual ObjectResult<SP_SelectDocType_Result> SP_SelectDocType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectDocType_Result>("SP_SelectDocType");
        }
    
        public virtual ObjectResult<SP_SelectLanguages_Result> SP_SelectLanguages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectLanguages_Result>("SP_SelectLanguages");
        }
    
        public virtual ObjectResult<SP_SelectMedicine_Result> SP_SelectMedicine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectMedicine_Result>("SP_SelectMedicine");
        }
    
        public virtual ObjectResult<SP_SelectNewss_Result> SP_SelectNewss()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectNewss_Result>("SP_SelectNewss");
        }
    
        public virtual ObjectResult<SP_SelectPatient_Result> SP_SelectPatient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectPatient_Result>("SP_SelectPatient");
        }
    
        public virtual ObjectResult<SP_SelectRole_Result> SP_SelectRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectRole_Result>("SP_SelectRole");
        }
    
        public virtual ObjectResult<SP_SelectSpeciality_Result> SP_SelectSpeciality()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectSpeciality_Result>("SP_SelectSpeciality");
        }
    
        public virtual ObjectResult<SP_SelectStates_Result> SP_SelectStates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectStates_Result>("SP_SelectStates");
        }
    
        public virtual ObjectResult<SP_SelectSystemItems_Result> SP_SelectSystemItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectSystemItems_Result>("SP_SelectSystemItems");
        }
    
        public virtual int SP_SelectSystems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SelectSystems");
        }
    
        public virtual ObjectResult<SP_selectTransactionHistory_Result> SP_selectTransactionHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_selectTransactionHistory_Result>("SP_selectTransactionHistory");
        }
    
        public virtual ObjectResult<SP_SelectZipCode_Result> SP_SelectZipCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectZipCode_Result>("SP_SelectZipCode");
        }
    
        public virtual int sp_UpdateAlerts(Nullable<long> alertID, string alertText, string alertFor, string mB, Nullable<System.DateTime> mD)
        {
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("alertID", alertID) :
                new ObjectParameter("alertID", typeof(long));
    
            var alertTextParameter = alertText != null ?
                new ObjectParameter("alertText", alertText) :
                new ObjectParameter("alertText", typeof(string));
    
            var alertForParameter = alertFor != null ?
                new ObjectParameter("alertFor", alertFor) :
                new ObjectParameter("alertFor", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAlerts", alertIDParameter, alertTextParameter, alertForParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateAllergy(Nullable<long> allergyID, string allergyName, string mB, Nullable<System.DateTime> mD)
        {
            var allergyIDParameter = allergyID.HasValue ?
                new ObjectParameter("allergyID", allergyID) :
                new ObjectParameter("allergyID", typeof(long));
    
            var allergyNameParameter = allergyName != null ?
                new ObjectParameter("allergyName", allergyName) :
                new ObjectParameter("allergyName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAllergy", allergyIDParameter, allergyNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateCity(Nullable<long> cityID, string cityName, string mB, Nullable<System.DateTime> mD)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(long));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCity", cityIDParameter, cityNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateDoctor(Nullable<long> iD, string firstName, string lastName, string email, string password, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateDoctor", iDParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateDocumentType(Nullable<long> docTypeID, string typeName, string mB, Nullable<System.DateTime> mD)
        {
            var docTypeIDParameter = docTypeID.HasValue ?
                new ObjectParameter("docTypeID", docTypeID) :
                new ObjectParameter("docTypeID", typeof(long));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("typeName", typeName) :
                new ObjectParameter("typeName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateDocumentType", docTypeIDParameter, typeNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateLanguages(Nullable<long> languageID, string languageName, string mB, Nullable<System.DateTime> mD)
        {
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("languageID", languageID) :
                new ObjectParameter("languageID", typeof(long));
    
            var languageNameParameter = languageName != null ?
                new ObjectParameter("languageName", languageName) :
                new ObjectParameter("languageName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateLanguages", languageIDParameter, languageNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateMedicine(Nullable<long> medicineID, string medicineName, string mB, Nullable<System.DateTime> mD)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("medicineID", medicineID) :
                new ObjectParameter("medicineID", typeof(long));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateMedicine", medicineIDParameter, medicineNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateNews(Nullable<long> newsID, string newstitle, string newsdetail, byte[] newsthumbnail, byte[] newsImage, string mB, Nullable<System.DateTime> mD)
        {
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("newsID", newsID) :
                new ObjectParameter("newsID", typeof(long));
    
            var newstitleParameter = newstitle != null ?
                new ObjectParameter("newstitle", newstitle) :
                new ObjectParameter("newstitle", typeof(string));
    
            var newsdetailParameter = newsdetail != null ?
                new ObjectParameter("newsdetail", newsdetail) :
                new ObjectParameter("newsdetail", typeof(string));
    
            var newsthumbnailParameter = newsthumbnail != null ?
                new ObjectParameter("newsthumbnail", newsthumbnail) :
                new ObjectParameter("newsthumbnail", typeof(byte[]));
    
            var newsImageParameter = newsImage != null ?
                new ObjectParameter("newsImage", newsImage) :
                new ObjectParameter("newsImage", typeof(byte[]));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateNews", newsIDParameter, newstitleParameter, newsdetailParameter, newsthumbnailParameter, newsImageParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdatePatient(Nullable<long> iD, string firstName, string lastName, string email, string password, string mB, Nullable<System.DateTime> mD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePatient", iDParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateSpeciality(Nullable<long> speciallityID, string specialityName, string mB, Nullable<System.DateTime> mD)
        {
            var speciallityIDParameter = speciallityID.HasValue ?
                new ObjectParameter("speciallityID", speciallityID) :
                new ObjectParameter("speciallityID", typeof(long));
    
            var specialityNameParameter = specialityName != null ?
                new ObjectParameter("specialityName", specialityName) :
                new ObjectParameter("specialityName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSpeciality", speciallityIDParameter, specialityNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateStates(Nullable<long> stateID, string stateName, string mB, Nullable<System.DateTime> mD)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(long));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("stateName", stateName) :
                new ObjectParameter("stateName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStates", stateIDParameter, stateNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateSystemItem(Nullable<long> sysitemID, Nullable<long> sysID, string sysitemName, string mB, Nullable<System.DateTime> mD)
        {
            var sysitemIDParameter = sysitemID.HasValue ?
                new ObjectParameter("sysitemID", sysitemID) :
                new ObjectParameter("sysitemID", typeof(long));
    
            var sysIDParameter = sysID.HasValue ?
                new ObjectParameter("sysID", sysID) :
                new ObjectParameter("sysID", typeof(long));
    
            var sysitemNameParameter = sysitemName != null ?
                new ObjectParameter("sysitemName", sysitemName) :
                new ObjectParameter("sysitemName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSystemItem", sysitemIDParameter, sysIDParameter, sysitemNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateSystems(Nullable<long> systemID, string systemName, string mB, Nullable<System.DateTime> mD)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(long));
    
            var systemNameParameter = systemName != null ?
                new ObjectParameter("systemName", systemName) :
                new ObjectParameter("systemName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateSystems", systemIDParameter, systemNameParameter, mBParameter, mDParameter);
        }
    
        public virtual int sp_UpdateZipCode(Nullable<long> zipID, string zipName, string mB, Nullable<System.DateTime> mD)
        {
            var zipIDParameter = zipID.HasValue ?
                new ObjectParameter("zipID", zipID) :
                new ObjectParameter("zipID", typeof(long));
    
            var zipNameParameter = zipName != null ?
                new ObjectParameter("zipName", zipName) :
                new ObjectParameter("zipName", typeof(string));
    
            var mBParameter = mB != null ?
                new ObjectParameter("MB", mB) :
                new ObjectParameter("MB", typeof(string));
    
            var mDParameter = mD.HasValue ?
                new ObjectParameter("MD", mD) :
                new ObjectParameter("MD", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateZipCode", zipIDParameter, zipNameParameter, mBParameter, mDParameter);
        }
    
        public virtual ObjectResult<SP_GetPatientMedication_Result> SP_GetPatientMedication(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPatientMedication_Result>("SP_GetPatientMedication", patientIDParameter);
        }
    
        public virtual ObjectResult<SP_GetPatientAllergies_Result> SP_GetPatientAllergies(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPatientAllergies_Result>("SP_GetPatientAllergies", patientIDParameter);
        }
    
        public virtual ObjectResult<SP_GetPatientConditions_Result> SP_GetPatientConditions(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPatientConditions_Result>("SP_GetPatientConditions", patientIDParameter);
        }
    
        public virtual ObjectResult<SP_GetPatientSurgeries_Result> SP_GetPatientSurgeries(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPatientSurgeries_Result>("SP_GetPatientSurgeries", patientIDParameter);
        }
    }
}
